#! /usr/bin/env python
"""
    This module checks files/directories for presence of malware/virus etc using Google Virustotal service:
    Virustotal API file check -https://www.virustotal.com/vtapi/v2/file/report
    A big thanks to Google Virustotal for providing this free service.
"""

import urllib
import urllib2
import json
import logging
import time

class Virustotal():

    __logger = None

    def __init__(self,log_instance=None):
        if log_instance:
            self.__logger = log_instance
        else:
            self.__logger = logging.getLogger(__name__)


    def check_dns_connectivity(self,ip=None):
        import socket
        host = None
        try:
            if ip:
                host = socket.gethostbyaddr(ip)
            else:
                host = socket.gethostbyaddr('8.8.8.8')
            return True
        except Exception:
            return False

    def _setup_proxy(self,name, port, user, passwd):
        opener = None
        proxy = urllib2.ProxyHandler({'http': 'http://' + user + ':' + passwd + '@' + name + ':' + port,
                                    'https': 'http://' + user + ':' + passwd + '@' + name + ':' + port})
        auth = urllib2.HTTPBasicAuthHandler()
        opener = urllib2.build_opener(proxy, auth, urllib2.HTTPHandler)
        return opener

    def check_internet_connectivity(self,use_proxy, proxy_user, proxy_password, proxy_server, proxy_port):
        url = 'http://www.google.com'
        proxy_handler = None
        if use_proxy:
            proxy_handler = self._setup_proxy(proxy_server, proxy_port, proxy_user, proxy_password)
            urllib2.install_opener(proxy_handler)
        try:
            conn = urllib2.urlopen(url)
            response = conn.read()
            if response:
                return True
            else:
                return False
        except Exception, e:
            self.__logger.error("Error in checking internet connectivity - %s" % str(e).strip())

    def virustotal_filechecker(self,url, api_key, filename, md5_hash, proxy_handler=None):
        """
            Check VirusTotal report for the given file's - MD5 hash
        """
        response = None
        Ismalware = False
        response_dict = None
        # request using proxy or not
        if proxy_handler:
            urllib2.install_opener(proxy_handler)
        # POST request parameters
        post_parameters = {"resource": md5_hash, "apikey": api_key}
        encoded_data = urllib.urlencode(post_parameters)
        req = urllib2.Request(url, encoded_data)
        try:
            response = urllib2.urlopen(req)
        except Exception, e:
            self.__logger.error("Error while getting VirusTotal report for file - %s - %s." % (filename, str(e).strip()))

        report_result = response.read()
        # http response headers
        self.__logger.debug("Http response headers:\n%s" % (response.info()))
        # http status codes
        self.__logger.debug("Http response code:\n%s" % (response.getcode()))
        # http response
        self.__logger.debug("Http response:\n%s" % (report_result))

        response_dict = json.loads(report_result)
        # delay introduced to satisfy virustotal requirement of 4 API requests per minute for non-commercial feed.
        time.sleep(16)

        if response_dict['response_code'] != 0:
            if response_dict['positives'] != 0:
                Ismalware = True
            else:
                Ismalware = False
        else:
            Ismalware = False
            response_dict = []
            #if response_dict['response_code']==0:
            # print "The file is not a malware as no result could be found in the virustotal database."
            #elif response_dict['response_code']==1:
            # print "The file is a malware and %s virus engines have detected it. Detailed results found in the virustotal database are:" %response_dict['positives']
            # for key,value in json['scans'].items():
            # print key,value['result']
        return Ismalware, response_dict