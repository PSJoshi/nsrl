#! /usr/bin/env python
"""
    This module checks files/directories for presence of malware using Team Cymru service:
    Malware hash registry -http://www.team-cymru.org/Services/MHR/
    A big thanks to Team Cymru team for providing this free service.
"""
import urllib2
import subprocess
import time
import datetime
import logging

class Teamcymru():
    """
    This class checks md5 of a file against Team Cymru malware hash registry service:
    Malware hash registry -http://www.team-cymru.org/Services/MHR/
    A big thanks to Team Cymru team for providing this free service.
    """
    __logger = None

    def __init__(self,log_instance=None):
        if log_instance:
            self.__logger = log_instance
        else:
            self.__logger = logging.getLogger(__name__)

    def check_dns_connectivity(self,ip=None):
        """
            DNS connectivity check
        """
        import socket
        host = None
        try:
            if ip:
                host = socket.gethostbyaddr(ip)
            else:
                host = socket.gethostbyaddr('8.8.8.8')
            return True
        except Exception:
            return False

    def _setup_proxy(self,name, port, user, passwd):
        """
            set up proxy
        """
        opener = None
        proxy = urllib2.ProxyHandler({'http': 'http://' + user + ':' + passwd + '@' + name + ':' + port,
                                    'https': 'http://' + user + ':' + passwd + '@' + name + ':' + port})
        auth = urllib2.HTTPBasicAuthHandler()
        opener = urllib2.build_opener(proxy, auth, urllib2.HTTPHandler)
        return opener

    def _check_internet_connectivity(self,use_proxy, proxy_user, proxy_password, proxy_server, proxy_port):
        """
            Checking internet connection
        """
        url = 'http://www.google.com'
        proxy_handler = None
        if use_proxy:
            proxy_handler = self._setup_proxy(proxy_server, proxy_port, proxy_user, proxy_password)
            urllib2.install_opener(proxy_handler)
        try:
            conn = urllib2.urlopen(url)
            response = conn.read()
            if response:
                return True
            else:
                return False
        except Exception, e:
            self.__logger.error("Error while checking internet connectivity - %s" % str(e).strip())

    def __run_command(self,exec_command, timeout=10, poll_seconds=0.25):
        """
            run the command as a seperate process
        """
        try:
            proc = subprocess.Popen(exec_command, bufsize=0, shell=True, stdout=subprocess.PIPE, stderr=subprocess.PIPE)
            deadline = time.time() + float(timeout)
            while time.time() < deadline and proc.poll() == None:
                time.sleep(float(poll_seconds))
            stdout, stderr = proc.communicate()
            return stdout, stderr
        except Exception, e:
            self.__logger.error("Error while executing the command - %s for Team Cymru malware hash registry check" % exec_command)


    def query_malware_hash_registry(self,team_cymru_url,md5_hash, timeout_interval, polling_interval):
        """
            query Team Cymru malware hash registry to check if md5 hash is malware
        """
        try:
            _cmd = "/usr/bin/nslookup -querytype=TXT " + md5_hash + '.' + team_cymru_url #'.malware.hash.cymru.com'
            response, error = self.__run_command(_cmd, timeout_interval, polling_interval)
            self.__logger.debug("Team Cymru malware hash registry response - %s" % response)
            if error:
                self.__logger.error("Error while checking Team Cymru malware hash registry - %s and the error is - %s" % (_cmd, error))
            return response, error
        except Exception, e:
            self.__logger.error("Error while checking Team Cymru malware hash registry - %s and the error is - %s" % (_cmd, e))

    def process_team_cymru_response(self, md5_hash, team_cymru_url, response):
        """
            Process Team Cymru malware hash response
        """
        try:
            response = response.split('\n')
            for item in response:
                if item.find(md5_hash + '.' + team_cymru_url) >= 0:
                    malware_line = item
                    if malware_line.lower().find('nxdomain') >= 0:
                        # no malware present: percent_detection=0,last_detection=current time
                        return False, datetime.datetime.now(), 0
                    else:
                        malware_details = malware_line.strip().split('=')[1]
                        last_updated, percent_detection = malware_details.replace('"', '').strip().split(' ')
                        #print last_updated,percent_detection
                        return True, datetime.datetime.fromtimestamp(long(last_updated)), percent_detection
        except Exception, e:
            self.__logger.error("Error while processing Team Cymru's response - %s and the error is - %s" % (response, e))